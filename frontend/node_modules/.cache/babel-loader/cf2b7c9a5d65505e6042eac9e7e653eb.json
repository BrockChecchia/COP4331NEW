{"ast":null,"code":"var _jsxFileName = \"/home/reia/cards/frontend/src/components/ActivePanel.js\";\nimport React, { useState } from 'react';\nimport useEffectAsync from '../components/useEffectAsync'; // admin is generally referred to as user (ex: user_data) and I'll be calling the users the admin oversees clients\n\nfunction ActivePanel() {\n  var search = '';\n  var res;\n  var res2;\n  const [message, setMessage] = useState('');\n  const [searchResults, setResults] = useState('');\n  const [tripList, setTripList] = useState('');\n\n  var _ud = localStorage.getItem('user_data');\n\n  var ud = JSON.parse(_ud); // TODO - depends on vars we have stored for admin, assuming we'll have some way to get the adminUser's clients\n\n  var userId = ud.id;\n  var firstName = ud.firstName;\n  var lastName = ud.lastName;\n  var userName = ud.userName; // search for trips on page load\n\n  useEffectAsync(async () => {\n    // Remove the old contact elements before the new ones are added\n    while (document.getElementById(\"ActTripList\").hasChildNodes()) {\n      document.getElementById(\"ActTripList\").removeChild(document.getElementById(\"ActTripList\").lastChild);\n    }\n\n    var js = '{\"userName\":\"' + userName + '\"}';\n\n    try {\n      // build and send JSON\n      let response = await fetch('http://localhost:5000/api/listTripsByAdmin', {\n        method: 'POST',\n        body: js,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      var txt = await response.text();\n      res = JSON.parse(txt);\n      res = res.Results;\n    } catch (e) {\n      alert(e.toString());\n    } // check for null results\n\n\n    if (typeof res !== 'undefined') {\n      // after recieving results, select the ones we need and build their dropdowns\n      for (var i = 0; i < res.length; i++) {\n        // check that the trip status is active\n        var isApproved = res[i].isApproved;\n        var isNew = res[i].isNew;\n\n        if (!(isApproved === true && isNew === true)) {\n          continue;\n        } // get user name of user who requested trip\n\n\n        js = '{\"Id\":\"' + res[i].userId + '\"}';\n\n        try {\n          // build and send JSON\n          let response = await fetch('http://localhost:5000/api/getById', {\n            method: 'POST',\n            body: js,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          var txt = await response.text();\n          res2 = JSON.parse(txt);\n        } catch (e) {\n          alert(e.toString());\n        } // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n\n\n        var ID = res[i]._id;\n        var uID = res2.userName;\n        var loc1 = res[i].startLocation;\n        var loc2 = res[i].destination;\n        var departTime = res[i].startTime;\n        var reason = res[i].purpose;\n        var weather = res[i].weather; // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n\n        var collButton = document.createElement(\"button\");\n        collButton.innerHTML = \"ACTIVE: \" + uID + \"'s Trip to \" + loc2;\n        collButton.id = ID + \"-coll\";\n        collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n        var contentDiv = document.createElement(\"div\");\n        contentDiv.id = \"\" + ID;\n        contentDiv.className = \"content\"; // create the <p> for the content div\n\n        var currentLocP = document.createElement(\"p\");\n        var departTimeP = document.createElement(\"p\");\n        var reasonP = document.createElement(\"p\"); // fill <p>s with content from json\n\n        currentLocP.innerHTML = \"Current Location: \" + loc1;\n        departTimeP.innerHTML = \"Depart Time: \" + departTime;\n        reasonP.innerHTML = \"Reason For Trip: \" + reason; // add the <p>s to the content div\n\n        contentDiv.appendChild(currentLocP);\n        contentDiv.appendChild(departTimeP);\n        contentDiv.appendChild(reasonP); // add collButton and contentDiv to TripList\n\n        document.getElementById(\"ActTripList\").appendChild(collButton);\n        document.getElementById(\"ActTripList\").appendChild(contentDiv); // add event listener\n\n        collButton.addEventListener(\"click\", function () {\n          this.classList.toggle(\"active\");\n          var content = this.nextElementSibling;\n\n          if (content.style.maxHeight) {\n            content.style.maxHeight = null;\n          } else {\n            content.style.maxHeight = content.scrollHeight + \"px\";\n          }\n        });\n      }\n    }\n  }, []); // only re-run when the search term changes\n  // search list of trips by a term\n\n  const searchAct = async event => {\n    event.preventDefault(); // Remove the old contact elements before the new ones are added\n\n    while (document.getElementById(\"ActTripList\").hasChildNodes()) {\n      document.getElementById(\"ActTripList\").removeChild(document.getElementById(\"ActTripList\").lastChild);\n    }\n\n    var js = '{\"userName\":\"' + userName + '\"}';\n\n    try {\n      // build and send JSON\n      let response = await fetch('http://localhost:5000/api/listTripsByAdmin', {\n        method: 'POST',\n        body: js,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      var txt = await response.text();\n      res = JSON.parse(txt);\n      res = res.Results;\n    } catch (e) {\n      alert(e.toString());\n    } // check for null results\n\n\n    if (typeof res !== 'undefined') {\n      // after recieving results, select the ones we need and build their dropdowns\n      for (var i = 0; i < res.length; i++) {\n        // check that the trip status is active\n        var isApproved = res[i].isApproved;\n        var isNew = res[i].isNew;\n\n        if (!(isApproved === true && isNew === true)) {\n          continue;\n        } // get user name of user who requested trip\n\n\n        js = '{\"Id\":\"' + res[i].userId + '\"}';\n\n        try {\n          // build and send JSON\n          let response = await fetch('http://localhost:5000/api/getById', {\n            method: 'POST',\n            body: js,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          var txt = await response.text();\n          res2 = JSON.parse(txt);\n        } catch (e) {\n          alert(e.toString());\n        } // TODO - add search by search var, and possibly add multiple types of searches~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n        if (search !== \"\" && res2.userName.indexOf(search.value) === -1) {\n          continue;\n        } // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n\n\n        var ID = res[i]._id;\n        var uID = res2.userName;\n        var loc1 = res[i].startLocation;\n        var loc2 = res[i].destination;\n        var departTime = res[i].startTime;\n        var reason = res[i].purpose;\n        var weather = res[i].weather; // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n\n        var collButton = document.createElement(\"button\");\n        collButton.innerHTML = \"ACTIVE: \" + uID + \"'s Trip to \" + loc2;\n        collButton.id = ID + \"-coll\";\n        collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n        var contentDiv = document.createElement(\"div\");\n        contentDiv.id = \"\" + ID;\n        contentDiv.className = \"content\"; // create the <p> for the content div\n\n        var currentLocP = document.createElement(\"p\");\n        var departTimeP = document.createElement(\"p\");\n        var reasonP = document.createElement(\"p\"); // fill <p>s with content from json\n\n        currentLocP.innerHTML = \"Current Location: \" + loc1;\n        departTimeP.innerHTML = \"Depart Time: \" + departTime;\n        reasonP.innerHTML = \"Reason For Trip: \" + reason; // add the <p>s to the content div\n\n        contentDiv.appendChild(currentLocP);\n        contentDiv.appendChild(departTimeP);\n        contentDiv.appendChild(reasonP); // add collButton and contentDiv to TripList\n\n        document.getElementById(\"ActTripList\").appendChild(collButton);\n        document.getElementById(\"ActTripList\").appendChild(contentDiv); // add event listener\n\n        collButton.addEventListener(\"click\", function () {\n          this.classList.toggle(\"active\");\n          var content = this.nextElementSibling;\n\n          if (content.style.maxHeight) {\n            content.style.maxHeight = null;\n          } else {\n            content.style.maxHeight = content.scrollHeight + \"px\";\n          }\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"ActivePanel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"searchPanelAct\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"searchActText\",\n    placeholder: \"Search\",\n    ref: c => search = c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    id: \"searchActButton\",\n    class: \"buttons\",\n    onClick: searchAct,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 17\n    }\n  }, \" Search \")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"ActTripListDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"actTripSearchResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"ActTripList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 19\n    }\n  }));\n}\n\n;\nexport default ActivePanel;","map":{"version":3,"sources":["/home/reia/cards/frontend/src/components/ActivePanel.js"],"names":["React","useState","useEffectAsync","ActivePanel","search","res","res2","message","setMessage","searchResults","setResults","tripList","setTripList","_ud","localStorage","getItem","ud","JSON","parse","userId","id","firstName","lastName","userName","document","getElementById","hasChildNodes","removeChild","lastChild","js","response","fetch","method","body","headers","txt","text","Results","e","alert","toString","i","length","isApproved","isNew","ID","_id","uID","loc1","startLocation","loc2","destination","departTime","startTime","reason","purpose","weather","collButton","createElement","innerHTML","className","contentDiv","currentLocP","departTimeP","reasonP","appendChild","addEventListener","classList","toggle","content","nextElementSibling","style","maxHeight","scrollHeight","searchAct","event","preventDefault","indexOf","value","c"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport useEffectAsync from '../components/useEffectAsync';\n\n// admin is generally referred to as user (ex: user_data) and I'll be calling the users the admin oversees clients\n\nfunction ActivePanel() {\n    var search = '';\n    var res;\n    var res2;\n\n    const [message, setMessage] = useState('');\n    const [searchResults, setResults] = useState('');\n    const [tripList, setTripList] = useState('');\n\n    var _ud = localStorage.getItem('user_data');\n    var ud = JSON.parse(_ud);\n\n    // TODO - depends on vars we have stored for admin, assuming we'll have some way to get the adminUser's clients\n    var userId = ud.id;\n    var firstName = ud.firstName;\n    var lastName = ud.lastName;\n    var userName = ud.userName;\n\n    // search for trips on page load\n    useEffectAsync(async () => {\n\n        // Remove the old contact elements before the new ones are added\n        while (document.getElementById(\"ActTripList\").hasChildNodes()) {\n            document.getElementById(\"ActTripList\").removeChild(document.getElementById(\"ActTripList\").lastChild);\n        }\n\n        var js = '{\"userName\":\"' + userName + '\"}';\n\n        try {\n            // build and send JSON\n            let response = await fetch('http://localhost:5000/api/listTripsByAdmin',\n                { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n            var txt = await response.text();\n            res = JSON.parse(txt);\n            res = res.Results;\n        }\n\n        catch (e) {\n            alert(e.toString());\n        }\n\n        // check for null results\n        if (typeof res !== 'undefined') {\n            // after recieving results, select the ones we need and build their dropdowns\n            for (var i = 0; i < res.length; i++) {\n                // check that the trip status is active\n                var isApproved = res[i].isApproved;\n                var isNew = res[i].isNew;\n\n                if (!(isApproved === true && isNew === true)) {\n                    continue;\n                }\n\n                // get user name of user who requested trip\n                js = '{\"Id\":\"' + res[i].userId + '\"}';\n                try {\n                    // build and send JSON\n                    let response = await fetch('http://localhost:5000/api/getById',\n                        { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n                    var txt = await response.text();\n                    res2 = JSON.parse(txt);\n                }\n                catch (e) {\n                    alert(e.toString());\n                }\n\n                // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n                var ID = res[i]._id;\n                var uID = res2.userName;\n                var loc1 = res[i].startLocation;\n                var loc2 = res[i].destination;\n                var departTime = res[i].startTime;\n                var reason = res[i].purpose;\n                var weather = res[i].weather;\n\n                // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                var collButton = document.createElement(\"button\");\n                collButton.innerHTML = \"ACTIVE: \" + uID + \"'s Trip to \" + loc2;\n                collButton.id = ID + \"-coll\";\n                collButton.className = \"collapsible\";\n\n                // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                var contentDiv = document.createElement(\"div\");\n                contentDiv.id = \"\" + ID;\n                contentDiv.className = \"content\";\n\n                // create the <p> for the content div\n                var currentLocP = document.createElement(\"p\");\n                var departTimeP = document.createElement(\"p\");\n                var reasonP = document.createElement(\"p\");\n\n                // fill <p>s with content from json\n                currentLocP.innerHTML = \"Current Location: \" + loc1;\n                departTimeP.innerHTML = \"Depart Time: \" + departTime;\n                reasonP.innerHTML = \"Reason For Trip: \" + reason;\n\n                // add the <p>s to the content div\n                contentDiv.appendChild(currentLocP);\n                contentDiv.appendChild(departTimeP);\n                contentDiv.appendChild(reasonP);\n\n                // add collButton and contentDiv to TripList\n                document.getElementById(\"ActTripList\").appendChild(collButton);\n                document.getElementById(\"ActTripList\").appendChild(contentDiv);\n\n                // add event listener\n                collButton.addEventListener(\"click\", function () {\n                    this.classList.toggle(\"active\");\n                    var content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    }\n                    else {\n                        content.style.maxHeight = content.scrollHeight + \"px\";\n                    }\n                })\n            }\n        }\n    }, []); // only re-run when the search term changes\n\n\n    // search list of trips by a term\n    const searchAct = async event => {\n        event.preventDefault();\n\n        // Remove the old contact elements before the new ones are added\n        while (document.getElementById(\"ActTripList\").hasChildNodes()) {\n            document.getElementById(\"ActTripList\").removeChild(document.getElementById(\"ActTripList\").lastChild);\n        }\n\n        var js = '{\"userName\":\"' + userName + '\"}';\n\n        try {\n            // build and send JSON\n            let response = await fetch('http://localhost:5000/api/listTripsByAdmin',\n                { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n            var txt = await response.text();\n            res = JSON.parse(txt);\n            res = res.Results;\n        }\n\n        catch (e) {\n            alert(e.toString());\n        }\n\n        // check for null results\n        if (typeof res !== 'undefined') {\n\n            // after recieving results, select the ones we need and build their dropdowns\n            for (var i = 0; i < res.length; i++) {\n                // check that the trip status is active\n                var isApproved = res[i].isApproved;\n                var isNew = res[i].isNew;\n\n                if (!(isApproved === true && isNew === true)) {\n                    continue;\n                }\n\n                // get user name of user who requested trip\n                js = '{\"Id\":\"' + res[i].userId + '\"}';\n                try {\n                    // build and send JSON\n                    let response = await fetch('http://localhost:5000/api/getById',\n                        { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n                    var txt = await response.text();\n                    res2 = JSON.parse(txt);\n                }\n                catch (e) {\n                    alert(e.toString());\n                }\n\n                // TODO - add search by search var, and possibly add multiple types of searches~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                if (search !== \"\" && res2.userName.indexOf(search.value) === -1) {\n                    continue;\n                }\n\n                // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n                var ID = res[i]._id;\n                var uID = res2.userName;\n                var loc1 = res[i].startLocation;\n                var loc2 = res[i].destination;\n                var departTime = res[i].startTime;\n                var reason = res[i].purpose;\n                var weather = res[i].weather;\n\n                // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                var collButton = document.createElement(\"button\");\n                collButton.innerHTML = \"ACTIVE: \" + uID + \"'s Trip to \" + loc2;\n                collButton.id = ID + \"-coll\";\n                collButton.className = \"collapsible\";\n\n                // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                var contentDiv = document.createElement(\"div\");\n                contentDiv.id = \"\" + ID;\n                contentDiv.className = \"content\";\n\n                // create the <p> for the content div\n                var currentLocP = document.createElement(\"p\");\n                var departTimeP = document.createElement(\"p\");\n                var reasonP = document.createElement(\"p\");\n\n                // fill <p>s with content from json\n                currentLocP.innerHTML = \"Current Location: \" + loc1;\n                departTimeP.innerHTML = \"Depart Time: \" + departTime;\n                reasonP.innerHTML = \"Reason For Trip: \" + reason;\n\n                // add the <p>s to the content div\n                contentDiv.appendChild(currentLocP);\n                contentDiv.appendChild(departTimeP);\n                contentDiv.appendChild(reasonP);\n\n                // add collButton and contentDiv to TripList\n                document.getElementById(\"ActTripList\").appendChild(collButton);\n                document.getElementById(\"ActTripList\").appendChild(contentDiv);\n\n                // add event listener\n                collButton.addEventListener(\"click\", function () {\n                    this.classList.toggle(\"active\");\n                    var content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    }\n                    else {\n                        content.style.maxHeight = content.scrollHeight + \"px\";\n                    }\n                })\n            }\n        }\n    }\n\n\n    return (\n        <div id=\"ActivePanel\">\n            <br />\n            <div id=\"searchPanelAct\" >\n\n                <input type=\"text\" id=\"searchActText\" placeholder=\"Search\" ref={(c) => search = c} />\n                <button type=\"button\" id=\"searchActButton\" class=\"buttons\" onClick={searchAct}> Search </button>\n            </div>\n\n            <div id=\"ActTripListDiv\">\n                <span id=\"actTripSearchResult\"></span>\n                <div id=\"ActTripList\">\n\n                </div>\n            </div>\n\n            <br /><br />\n\n        </div>\n    );\n};\n\n\nexport default ActivePanel;"]},"metadata":{},"sourceType":"module"}