{"ast":null,"code":"var _jsxFileName = \"/home/reia/cards/frontend/src/components/AllPanel.js\";\nimport React, { useState } from 'react';\nimport useEffectAsync from '../components/useEffectAsync'; // admin is generally referred to as user (ex: user_data) and I'll be calling the users the admin oversees clients\n\nfunction AllPanel() {\n  var search = '';\n  var res;\n  var res2;\n  var doNotUse;\n  const [message, setMessage] = useState('');\n  const [searchResults, setResults] = useState('');\n  const [tripList, setTripList] = useState('');\n\n  var _ud = localStorage.getItem('user_data');\n\n  var ud = JSON.parse(_ud); // TODO - depends on vars we have stored for admin, assuming we'll have some way to get the adminUser's clients\n\n  var userId = ud.id;\n  var firstName = ud.firstName;\n  var lastName = ud.lastName;\n  var userName = ud.userName; // search for trips on page load\n\n  useEffectAsync(async () => {\n    // Remove the old contact elements before the new ones are added\n    while (document.getElementById(\"AllTripList\").hasChildNodes()) {\n      document.getElementById(\"AllTripList\").removeChild(document.getElementById(\"AllTripList\").lastChild);\n    }\n\n    var js = '{\"userName\":\"' + userName + '\"}';\n\n    try {\n      // build and send JSON\n      let response = await fetch('http://localhost:5000/api/listTripsByAdmin', {\n        method: 'POST',\n        body: js,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      var txt = await response.text();\n      res = JSON.parse(txt);\n      res = res.Results;\n    } catch (e) {\n      alert(e.toString());\n    } // check for null results\n\n\n    if (typeof res !== 'undefined') {\n      // after recieving results, select the ones we need and build their dropdowns\n      for (var i = 0; i < res.length; i++) {\n        // get user name of user who requested trip\n        js = '{\"Id\":\"' + res[i].userId + '\"}';\n\n        try {\n          // build and send JSON\n          let response = await fetch('http://localhost:5000/api/getById', {\n            method: 'POST',\n            body: js,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          var txt = await response.text();\n          res2 = JSON.parse(txt);\n        } catch (e) {\n          alert(e.toString());\n        } // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n\n\n        var ID = res[i]._id;\n        var uID = res2.userName; //var client = res[i].Client;           \n\n        var loc1 = res[i].startLocation;\n        var loc2 = res[i].destination;\n        var departTime = res[i].startTime;\n        var reason = res[i].purpose;\n        var weather = res[i].weather;\n        var reasonDen = res[i].comments;\n        var arrivalTime = res[i].endTime;\n        var userIDNUM = res[i].userId; // TODO - SHOULD BE TEMP\n\n        var adminIDNUM = res[i].adminId; // TODO - SHOULD BE TEMP\n        // instantiate variables\n\n        var collButton = document.createElement(\"button\");\n        var contentDiv = document.createElement(\"div\"); // check the trip status\n\n        var isApproved = res[i].isApproved;\n        var isNew = res[i].isNew; // PENDING\n\n        if (isApproved === false && isNew === true) {\n          // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n          collButton.innerHTML = \"TRIP REQUEST: From: \" + loc1 + \" - To: \" + loc2;\n          collButton.id = ID + \"-coll\";\n          collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n          var contentDiv = document.createElement(\"div\");\n          contentDiv.id = ID + \"-cont\";\n          contentDiv.className = \"content\"; // create the <p> for the content div\n\n          var clientP = document.createElement(\"p\");\n          var weatherP = document.createElement(\"p\");\n          var departTimeP = document.createElement(\"p\");\n          var reasonP = document.createElement(\"p\"); // fill <p>s with content from json\n\n          clientP.innerHTML = \"Request From: \" + uID;\n          weatherP.innerHTML = \"Weather Conditions: \" + weather;\n          departTimeP.innerHTML = \"Depart Time: \" + departTime;\n          reasonP.innerHTML = \"Reason For Trip: \" + reason; // add the <p>s to the content div\n\n          contentDiv.appendChild(clientP);\n          contentDiv.appendChild(weatherP);\n          contentDiv.appendChild(departTimeP);\n          contentDiv.appendChild(reasonP); // add respond button to get to deny / accept panel                \n\n          var resButton = document.createElement(\"button\");\n          resButton.type = \"button\";\n          resButton.id = ID;\n          resButton.className = \"buttons\";\n          resButton.innerHTML = \"Respond to request\";\n          resButton.addEventListener(\"click\", function (e) {\n            // save id of trip to edit\n            var idInfo = {\n              idToEdit: e.currentTarget.id,\n              uID: userIDNUM,\n              aID: adminIDNUM\n            }; // TODO - SHOULD BE TEMP (uID and aID)\n            // alert(JSON.stringify(idInfo));\n\n            localStorage.setItem('trip_edit_data', JSON.stringify(idInfo)); // swap view to respond panel\n\n            document.getElementById(\"RespondPanel\").style.display = \"block\";\n            document.getElementById(\"AllPanel\").style.display = \"none\";\n          }); // add respond button to content div\n\n          contentDiv.appendChild(document.createElement(\"br\"));\n          contentDiv.appendChild(resButton); // add collButton and contentDiv to TripList\n\n          document.getElementById(\"AllTripList\").appendChild(collButton);\n          document.getElementById(\"AllTripList\").appendChild(contentDiv);\n        } // ACTIVE\n\n\n        if (isApproved === true && isNew === true) {\n          // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n          collButton.innerHTML = \"ACTIVE: \" + uID + \"'s Trip to \" + loc2;\n          collButton.id = ID + \"-coll\";\n          collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n          contentDiv.id = \"\" + ID;\n          contentDiv.className = \"content\"; // create the <p> for the content div\n\n          var currentLocP = document.createElement(\"p\");\n          var departTimeP = document.createElement(\"p\");\n          var reasonP = document.createElement(\"p\"); // fill <p>s with content from json\n\n          currentLocP.innerHTML = \"Current Location: \" + loc1;\n          departTimeP.innerHTML = \"Depart Time: \" + departTime;\n          reasonP.innerHTML = \"Reason For Trip: \" + reason; // add the <p>s to the content div\n\n          contentDiv.appendChild(currentLocP);\n          contentDiv.appendChild(departTimeP);\n          contentDiv.appendChild(reasonP);\n        } // FINISHED\n\n\n        if (isApproved === true && isNew === false) {\n          // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n          collButton.innerHTML = \"COMPLETE: \" + uID + \"'s Trip to \" + loc2;\n          collButton.id = ID + \"-coll\";\n          collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n          contentDiv.id = \"\" + ID;\n          contentDiv.className = \"content\"; // create the <p> for the content div\n\n          var departTimeP = document.createElement(\"p\");\n          var arrivalTimeP = document.createElement(\"p\");\n          var reasonP = document.createElement(\"p\"); // fill <p>s with content from json\n\n          departTimeP.innerHTML = \"Depart Time: \" + departTime;\n          arrivalTimeP.innerHTML = \"Arrival Time: \" + arrivalTime;\n          reasonP.innerHTML = \"Reason For Trip: \" + reason; // add the <p>s to the content div\n\n          contentDiv.appendChild(departTimeP);\n          contentDiv.appendChild(arrivalTimeP);\n          contentDiv.appendChild(reasonP);\n        } // DENIED\n\n\n        if (isApproved === false && isNew === false) {\n          // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n          collButton.innerHTML = \"DENIED: \" + uID + \"'s Trip to \" + loc2;\n          collButton.id = ID + \"-coll\";\n          collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n          contentDiv.id = \"\" + ID;\n          contentDiv.className = \"content\"; // create the <p> for the content div\n\n          var reasonDenP = document.createElement(\"p\"); // fill <p>s with content from json\n\n          reasonDenP.innerHTML = \"Reason For Denial: \" + reasonDen; // add the <p>s to the content div\n\n          contentDiv.appendChild(reasonDenP);\n        } // add collButton and contentDiv to TripList\n\n\n        document.getElementById(\"AllTripList\").appendChild(collButton);\n        document.getElementById(\"AllTripList\").appendChild(contentDiv); // add event listener\n\n        collButton.addEventListener(\"click\", function () {\n          this.classList.toggle(\"active\");\n          var content = this.nextElementSibling;\n\n          if (content.style.maxHeight) {\n            content.style.maxHeight = null;\n          } else {\n            content.style.maxHeight = content.scrollHeight + \"px\";\n          }\n        });\n      }\n    }\n  }, []); // do not re-run\n  // add specific search\n\n  const searchAll = async event => {\n    event.preventDefault(); // Remove the old contact elements before the new ones are added\n\n    while (document.getElementById(\"AllTripList\").hasChildNodes()) {\n      document.getElementById(\"AllTripList\").removeChild(document.getElementById(\"AllTripList\").lastChild);\n    }\n\n    var js = '{\"userName\":\"' + userName + '\"}';\n\n    try {\n      // build and send JSON\n      let response = await fetch('http://localhost:5000/api/listTripsByAdmin', {\n        method: 'POST',\n        body: js,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      var txt = await response.text();\n      res = JSON.parse(txt);\n      res = res.Results;\n    } catch (e) {\n      alert(e.toString());\n    } // check for null results\n    // check for null results\n\n\n    if (typeof res !== 'undefined') {\n      // after recieving results, select the ones we need and build their dropdowns\n      for (var i = 0; i < res.length; i++) {\n        // get user name of user who requested trip\n        js = '{\"Id\":\"' + res[i].userId + '\"}';\n\n        try {\n          // build and send JSON\n          let response = await fetch('http://localhost:5000/api/getById', {\n            method: 'POST',\n            body: js,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          var txt = await response.text();\n          res2 = JSON.parse(txt);\n        } catch (e) {\n          alert(e.toString());\n        } // TODO - add search by search var, and possibly add multiple types of searches~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n        if (search !== \"\" && res2.userName.indexOf(search.value) === -1) {\n          continue;\n        } // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n\n\n        var ID = res[i]._id;\n        var uID = res2.userName; //var client = res[i].Client;\n\n        var loc1 = res[i].startLocation;\n        var loc2 = res[i].destination;\n        var departTime = res[i].startTime;\n        var reason = res[i].purpose;\n        var weather = res[i].weather;\n        var reasonDen = res[i].comments;\n        var arrivalTime = res[i].endTime;\n        var userIDNUM = res[i].userId; // TODO - SHOULD BE TEMP\n\n        var adminIDNUM = res[i].adminId; // TODO - SHOULD BE TEMP\n        // instantiate variables\n\n        var collButton = document.createElement(\"button\");\n        var contentDiv = document.createElement(\"div\"); // check the trip status\n\n        var isApproved = res[i].isApproved;\n        var isNew = res[i].isNew; // PENDING\n\n        if (isApproved === false && isNew === true) {\n          // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n          collButton.innerHTML = \"TRIP REQUEST: From: \" + loc1 + \" - To: \" + loc2;\n          collButton.id = ID + \"-coll\";\n          collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n          var contentDiv = document.createElement(\"div\");\n          contentDiv.id = ID + \"-cont\";\n          contentDiv.className = \"content\"; // create the <p> for the content div\n\n          var clientP = document.createElement(\"p\");\n          var weatherP = document.createElement(\"p\");\n          var departTimeP = document.createElement(\"p\");\n          var reasonP = document.createElement(\"p\"); // fill <p>s with content from json\n\n          clientP.innerHTML = \"Request From: \" + uID;\n          weatherP.innerHTML = \"Weather Conditions: \" + weather;\n          departTimeP.innerHTML = \"Depart Time: \" + departTime;\n          reasonP.innerHTML = \"Reason For Trip: \" + reason; // add the <p>s to the content div\n\n          contentDiv.appendChild(clientP);\n          contentDiv.appendChild(weatherP);\n          contentDiv.appendChild(departTimeP);\n          contentDiv.appendChild(reasonP); // add respond button to get to deny / accept panel                \n\n          var resButton = document.createElement(\"button\");\n          resButton.type = \"button\";\n          resButton.id = ID;\n          resButton.className = \"buttons\";\n          resButton.innerHTML = \"Respond to request\";\n          resButton.addEventListener(\"click\", function (e) {\n            // save id of trip to edit\n            var idInfo = {\n              idToEdit: e.currentTarget.id,\n              uID: userIDNUM,\n              aID: adminIDNUM\n            }; // TODO - SHOULD BE TEMP (uID and aID)\n            // alert(JSON.stringify(idInfo));\n\n            localStorage.setItem('trip_edit_data', JSON.stringify(idInfo)); // swap view to respond panel\n\n            document.getElementById(\"RespondPanel\").style.display = \"block\";\n            document.getElementById(\"AllPanel\").style.display = \"none\";\n          }); // add respond button to content div\n\n          contentDiv.appendChild(document.createElement(\"br\"));\n          contentDiv.appendChild(resButton); // add collButton and contentDiv to TripList\n\n          document.getElementById(\"AllTripList\").appendChild(collButton);\n          document.getElementById(\"AllTripList\").appendChild(contentDiv);\n        } // ACTIVE\n\n\n        if (isApproved === true && isNew === true) {\n          // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n          collButton.innerHTML = \"ACTIVE: \" + uID + \"'s Trip to \" + loc2;\n          collButton.id = ID + \"-coll\";\n          collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n          contentDiv.id = \"\" + ID;\n          contentDiv.className = \"content\"; // create the <p> for the content div\n\n          var currentLocP = document.createElement(\"p\");\n          var departTimeP = document.createElement(\"p\");\n          var reasonP = document.createElement(\"p\"); // fill <p>s with content from json\n\n          currentLocP.innerHTML = \"Current Location: \" + loc1;\n          departTimeP.innerHTML = \"Depart Time: \" + departTime;\n          reasonP.innerHTML = \"Reason For Trip: \" + reason; // add the <p>s to the content div\n\n          contentDiv.appendChild(currentLocP);\n          contentDiv.appendChild(departTimeP);\n          contentDiv.appendChild(reasonP);\n        } // FINISHED\n\n\n        if (isApproved === true && isNew === false) {\n          // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n          collButton.innerHTML = \"COMPLETE: \" + uID + \"'s Trip to \" + loc2;\n          collButton.id = ID + \"-coll\";\n          collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n          contentDiv.id = \"\" + ID;\n          contentDiv.className = \"content\"; // create the <p> for the content div\n\n          var departTimeP = document.createElement(\"p\");\n          var arrivalTimeP = document.createElement(\"p\");\n          var reasonP = document.createElement(\"p\"); // fill <p>s with content from json\n\n          departTimeP.innerHTML = \"Depart Time: \" + departTime;\n          arrivalTimeP.innerHTML = \"Arrival Time: \" + arrivalTime;\n          reasonP.innerHTML = \"Reason For Trip: \" + reason; // add the <p>s to the content div\n\n          contentDiv.appendChild(departTimeP);\n          contentDiv.appendChild(arrivalTimeP);\n          contentDiv.appendChild(reasonP);\n        } // DENIED\n\n\n        if (isApproved === false && isNew === false) {\n          // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n          collButton.innerHTML = \"DENIED: \" + uID + \"'s Trip to \" + loc2;\n          collButton.id = ID + \"-coll\";\n          collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n          contentDiv.id = \"\" + ID;\n          contentDiv.className = \"content\"; // create the <p> for the content div\n\n          var reasonDenP = document.createElement(\"p\"); // fill <p>s with content from json\n\n          reasonDenP.innerHTML = \"Reason For Denial: \" + reasonDen; // add the <p>s to the content div\n\n          contentDiv.appendChild(reasonDenP);\n        } // add collButton and contentDiv to TripList\n\n\n        document.getElementById(\"AllTripList\").appendChild(collButton);\n        document.getElementById(\"AllTripList\").appendChild(contentDiv); // add event listener\n\n        collButton.addEventListener(\"click\", function () {\n          this.classList.toggle(\"active\");\n          var content = this.nextElementSibling;\n\n          if (content.style.maxHeight) {\n            content.style.maxHeight = null;\n          } else {\n            content.style.maxHeight = content.scrollHeight + \"px\";\n          }\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"AllPanel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"searchPanelAll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"searchAllText\",\n    placeholder: \"Search\",\n    ref: c => search = c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    id: \"searchAllButton\",\n    class: \"buttons\",\n    onClick: searchAll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 17\n    }\n  }, \" Search \")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"AllTripListDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"allTripSearchResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"AllTripList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 19\n    }\n  }));\n}\n\n;\nexport default AllPanel;","map":{"version":3,"sources":["/home/reia/cards/frontend/src/components/AllPanel.js"],"names":["React","useState","useEffectAsync","AllPanel","search","res","res2","doNotUse","message","setMessage","searchResults","setResults","tripList","setTripList","_ud","localStorage","getItem","ud","JSON","parse","userId","id","firstName","lastName","userName","document","getElementById","hasChildNodes","removeChild","lastChild","js","response","fetch","method","body","headers","txt","text","Results","e","alert","toString","i","length","ID","_id","uID","loc1","startLocation","loc2","destination","departTime","startTime","reason","purpose","weather","reasonDen","comments","arrivalTime","endTime","userIDNUM","adminIDNUM","adminId","collButton","createElement","contentDiv","isApproved","isNew","innerHTML","className","clientP","weatherP","departTimeP","reasonP","appendChild","resButton","type","addEventListener","idInfo","idToEdit","currentTarget","aID","setItem","stringify","style","display","currentLocP","arrivalTimeP","reasonDenP","classList","toggle","content","nextElementSibling","maxHeight","scrollHeight","searchAll","event","preventDefault","indexOf","value","c"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport useEffectAsync from '../components/useEffectAsync';\n\n// admin is generally referred to as user (ex: user_data) and I'll be calling the users the admin oversees clients\n\nfunction AllPanel() {\n    var search = '';\n    var res;\n    var res2;\n\n    var doNotUse;\n\n    const [message, setMessage] = useState('');\n    const [searchResults, setResults] = useState('');\n    const [tripList, setTripList] = useState('');\n\n    var _ud = localStorage.getItem('user_data');\n    var ud = JSON.parse(_ud);\n\n    // TODO - depends on vars we have stored for admin, assuming we'll have some way to get the adminUser's clients\n    var userId = ud.id;\n    var firstName = ud.firstName;\n    var lastName = ud.lastName;\n    var userName = ud.userName;\n\n    // search for trips on page load\n    useEffectAsync(async () => {\n\n        // Remove the old contact elements before the new ones are added\n        while (document.getElementById(\"AllTripList\").hasChildNodes()) {\n            document.getElementById(\"AllTripList\").removeChild(document.getElementById(\"AllTripList\").lastChild);\n        }\n\n        var js = '{\"userName\":\"' + userName + '\"}';\n\n        try {\n            // build and send JSON\n            let response = await fetch('http://localhost:5000/api/listTripsByAdmin',\n                { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n            var txt = await response.text();\n            res = JSON.parse(txt);\n            res = res.Results;\n        }\n\n        catch (e) {\n            alert(e.toString());\n        }\n\n        // check for null results\n        if (typeof res !== 'undefined') {\n\n            // after recieving results, select the ones we need and build their dropdowns\n            for (var i = 0; i < res.length; i++) {\n\n                // get user name of user who requested trip\n                js = '{\"Id\":\"' + res[i].userId + '\"}';\n                try {\n                    // build and send JSON\n                    let response = await fetch('http://localhost:5000/api/getById',\n                        { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n                    var txt = await response.text();\n                    res2 = JSON.parse(txt);\n                }\n                catch (e) {\n                    alert(e.toString());\n                }\n\n                // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n                var ID = res[i]._id;\n                var uID = res2.userName;\n                //var client = res[i].Client;           \n                var loc1 = res[i].startLocation;\n                var loc2 = res[i].destination;\n                var departTime = res[i].startTime;\n                var reason = res[i].purpose;\n                var weather = res[i].weather;\n                var reasonDen = res[i].comments;\n                var arrivalTime = res[i].endTime;\n\n                var userIDNUM = res[i].userId;  // TODO - SHOULD BE TEMP\n                var adminIDNUM = res[i].adminId;  // TODO - SHOULD BE TEMP\n\n                // instantiate variables\n                var collButton = document.createElement(\"button\");\n                var contentDiv = document.createElement(\"div\");\n\n                // check the trip status\n                var isApproved = res[i].isApproved;\n                var isNew = res[i].isNew;\n\n                // PENDING\n                if (isApproved === false && isNew === true) {\n                    // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                    collButton.innerHTML = \"TRIP REQUEST: From: \" + loc1 + \" - To: \" + loc2;\n                    collButton.id = ID + \"-coll\";\n                    collButton.className = \"collapsible\";\n\n                    // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                    var contentDiv = document.createElement(\"div\");\n                    contentDiv.id = ID + \"-cont\";\n                    contentDiv.className = \"content\";\n\n                    // create the <p> for the content div\n                    var clientP = document.createElement(\"p\");\n                    var weatherP = document.createElement(\"p\");\n                    var departTimeP = document.createElement(\"p\");\n                    var reasonP = document.createElement(\"p\");\n\n                    // fill <p>s with content from json\n                    clientP.innerHTML = \"Request From: \" + uID;\n                    weatherP.innerHTML = \"Weather Conditions: \" + weather;\n                    departTimeP.innerHTML = \"Depart Time: \" + departTime;\n                    reasonP.innerHTML = \"Reason For Trip: \" + reason;\n\n                    // add the <p>s to the content div\n                    contentDiv.appendChild(clientP);\n                    contentDiv.appendChild(weatherP);\n                    contentDiv.appendChild(departTimeP);\n                    contentDiv.appendChild(reasonP);\n\n                    // add respond button to get to deny / accept panel                \n                    var resButton = document.createElement(\"button\");\n                    resButton.type = \"button\";\n                    resButton.id = ID;\n                    resButton.className = \"buttons\";\n                    resButton.innerHTML = \"Respond to request\";\n                    resButton.addEventListener(\"click\", function (e) {\n                        // save id of trip to edit\n                        var idInfo = { idToEdit: e.currentTarget.id, uID: userIDNUM, aID: adminIDNUM }  // TODO - SHOULD BE TEMP (uID and aID)\n                        // alert(JSON.stringify(idInfo));\n                        localStorage.setItem('trip_edit_data', JSON.stringify(idInfo));\n\n                        // swap view to respond panel\n                        document.getElementById(\"RespondPanel\").style.display = \"block\";\n                        document.getElementById(\"AllPanel\").style.display = \"none\";\n                    });\n\n                    // add respond button to content div\n                    contentDiv.appendChild(document.createElement(\"br\"));\n                    contentDiv.appendChild(resButton);\n\n                    // add collButton and contentDiv to TripList\n                    document.getElementById(\"AllTripList\").appendChild(collButton);\n                    document.getElementById(\"AllTripList\").appendChild(contentDiv);\n                }\n\n                // ACTIVE\n                if (isApproved === true && isNew === true) {\n                    // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                    collButton.innerHTML = \"ACTIVE: \" + uID + \"'s Trip to \" + loc2;\n                    collButton.id = ID + \"-coll\";\n                    collButton.className = \"collapsible\";\n\n                    // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                    contentDiv.id = \"\" + ID;\n                    contentDiv.className = \"content\";\n\n                    // create the <p> for the content div\n                    var currentLocP = document.createElement(\"p\");\n                    var departTimeP = document.createElement(\"p\");\n                    var reasonP = document.createElement(\"p\");\n\n                    // fill <p>s with content from json\n                    currentLocP.innerHTML = \"Current Location: \" + loc1;\n                    departTimeP.innerHTML = \"Depart Time: \" + departTime;\n                    reasonP.innerHTML = \"Reason For Trip: \" + reason;\n\n                    // add the <p>s to the content div\n                    contentDiv.appendChild(currentLocP);\n                    contentDiv.appendChild(departTimeP);\n                    contentDiv.appendChild(reasonP);\n                }\n\n                // FINISHED\n                if (isApproved === true && isNew === false) {\n                    // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                    collButton.innerHTML = \"COMPLETE: \" + uID + \"'s Trip to \" + loc2;\n                    collButton.id = ID + \"-coll\";\n                    collButton.className = \"collapsible\";\n\n                    // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                    contentDiv.id = \"\" + ID;\n                    contentDiv.className = \"content\";\n\n                    // create the <p> for the content div\n                    var departTimeP = document.createElement(\"p\");\n                    var arrivalTimeP = document.createElement(\"p\");\n                    var reasonP = document.createElement(\"p\");\n\n                    // fill <p>s with content from json\n                    departTimeP.innerHTML = \"Depart Time: \" + departTime;\n                    arrivalTimeP.innerHTML = \"Arrival Time: \" + arrivalTime;\n                    reasonP.innerHTML = \"Reason For Trip: \" + reason;\n\n                    // add the <p>s to the content div\n                    contentDiv.appendChild(departTimeP);\n                    contentDiv.appendChild(arrivalTimeP);\n                    contentDiv.appendChild(reasonP);\n                }\n\n                // DENIED\n                if (isApproved === false && isNew === false) {\n                    // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                    collButton.innerHTML = \"DENIED: \" + uID + \"'s Trip to \" + loc2;\n                    collButton.id = ID + \"-coll\";\n                    collButton.className = \"collapsible\";\n\n                    // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                    contentDiv.id = \"\" + ID;\n                    contentDiv.className = \"content\";\n\n                    // create the <p> for the content div\n                    var reasonDenP = document.createElement(\"p\");\n\n                    // fill <p>s with content from json\n                    reasonDenP.innerHTML = \"Reason For Denial: \" + reasonDen;\n\n                    // add the <p>s to the content div\n                    contentDiv.appendChild(reasonDenP);\n                }\n\n                // add collButton and contentDiv to TripList\n                document.getElementById(\"AllTripList\").appendChild(collButton);\n                document.getElementById(\"AllTripList\").appendChild(contentDiv);\n\n                // add event listener\n                collButton.addEventListener(\"click\", function () {\n                    this.classList.toggle(\"active\");\n                    var content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    }\n                    else {\n                        content.style.maxHeight = content.scrollHeight + \"px\";\n                    }\n                })\n            }\n        }\n    }, []); // do not re-run\n\n\n\n    // add specific search\n    const searchAll = async event => {\n        event.preventDefault();\n\n        // Remove the old contact elements before the new ones are added\n        while (document.getElementById(\"AllTripList\").hasChildNodes()) {\n            document.getElementById(\"AllTripList\").removeChild(document.getElementById(\"AllTripList\").lastChild);\n        }\n\n        var js = '{\"userName\":\"' + userName + '\"}';\n\n        try {\n            // build and send JSON\n            let response = await fetch('http://localhost:5000/api/listTripsByAdmin',\n                { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n            var txt = await response.text();\n            res = JSON.parse(txt);\n            res = res.Results;\n        }\n\n        catch (e) {\n            alert(e.toString());\n        }\n\n        // check for null results\n        // check for null results\n        if (typeof res !== 'undefined') {\n\n            // after recieving results, select the ones we need and build their dropdowns\n            for (var i = 0; i < res.length; i++) {\n\n                // get user name of user who requested trip\n                js = '{\"Id\":\"' + res[i].userId + '\"}';\n                try {\n                    // build and send JSON\n                    let response = await fetch('http://localhost:5000/api/getById',\n                        { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n                    var txt = await response.text();\n                    res2 = JSON.parse(txt);\n                }\n                catch (e) {\n                    alert(e.toString());\n                }\n\n                // TODO - add search by search var, and possibly add multiple types of searches~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                if (search !== \"\" && res2.userName.indexOf(search.value) === -1) {\n                    continue;\n                }\n\n\n                // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n                var ID = res[i]._id;\n                var uID = res2.userName;\n                //var client = res[i].Client;\n                var loc1 = res[i].startLocation;\n                var loc2 = res[i].destination;\n                var departTime = res[i].startTime;\n                var reason = res[i].purpose;\n                var weather = res[i].weather;\n                var reasonDen = res[i].comments;\n                var arrivalTime = res[i].endTime;\n\n                var userIDNUM = res[i].userId;  // TODO - SHOULD BE TEMP\n                var adminIDNUM = res[i].adminId;  // TODO - SHOULD BE TEMP\n\n                // instantiate variables\n                var collButton = document.createElement(\"button\");\n                var contentDiv = document.createElement(\"div\");\n\n                // check the trip status\n                var isApproved = res[i].isApproved;\n                var isNew = res[i].isNew;\n\n                // PENDING\n                if (isApproved === false && isNew === true) {\n                    // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                    collButton.innerHTML = \"TRIP REQUEST: From: \" + loc1 + \" - To: \" + loc2;\n                    collButton.id = ID + \"-coll\";\n                    collButton.className = \"collapsible\";\n\n                    // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                    var contentDiv = document.createElement(\"div\");\n                    contentDiv.id = ID + \"-cont\";\n                    contentDiv.className = \"content\";\n\n                    // create the <p> for the content div\n                    var clientP = document.createElement(\"p\");\n                    var weatherP = document.createElement(\"p\");\n                    var departTimeP = document.createElement(\"p\");\n                    var reasonP = document.createElement(\"p\");\n\n                    // fill <p>s with content from json\n                    clientP.innerHTML = \"Request From: \" + uID;\n                    weatherP.innerHTML = \"Weather Conditions: \" + weather;\n                    departTimeP.innerHTML = \"Depart Time: \" + departTime;\n                    reasonP.innerHTML = \"Reason For Trip: \" + reason;\n\n                    // add the <p>s to the content div\n                    contentDiv.appendChild(clientP);\n                    contentDiv.appendChild(weatherP);\n                    contentDiv.appendChild(departTimeP);\n                    contentDiv.appendChild(reasonP);\n\n                    // add respond button to get to deny / accept panel                \n                    var resButton = document.createElement(\"button\");\n                    resButton.type = \"button\";\n                    resButton.id = ID;\n                    resButton.className = \"buttons\";\n                    resButton.innerHTML = \"Respond to request\";\n                    resButton.addEventListener(\"click\", function (e) {\n                        // save id of trip to edit\n                        var idInfo = { idToEdit: e.currentTarget.id, uID: userIDNUM, aID: adminIDNUM }  // TODO - SHOULD BE TEMP (uID and aID)\n                        // alert(JSON.stringify(idInfo));\n                        localStorage.setItem('trip_edit_data', JSON.stringify(idInfo));\n\n                        // swap view to respond panel\n                        document.getElementById(\"RespondPanel\").style.display = \"block\";\n                        document.getElementById(\"AllPanel\").style.display = \"none\";\n                    });\n\n                    // add respond button to content div\n                    contentDiv.appendChild(document.createElement(\"br\"));\n                    contentDiv.appendChild(resButton);\n\n                    // add collButton and contentDiv to TripList\n                    document.getElementById(\"AllTripList\").appendChild(collButton);\n                    document.getElementById(\"AllTripList\").appendChild(contentDiv);\n                }\n\n                // ACTIVE\n                if (isApproved === true && isNew === true) {\n                    // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                    collButton.innerHTML = \"ACTIVE: \" + uID + \"'s Trip to \" + loc2\n                    collButton.id = ID + \"-coll\";\n                    collButton.className = \"collapsible\";\n\n                    // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                    contentDiv.id = \"\" + ID;\n                    contentDiv.className = \"content\";\n\n                    // create the <p> for the content div\n                    var currentLocP = document.createElement(\"p\");\n                    var departTimeP = document.createElement(\"p\");\n                    var reasonP = document.createElement(\"p\");\n\n                    // fill <p>s with content from json\n                    currentLocP.innerHTML = \"Current Location: \" + loc1;\n                    departTimeP.innerHTML = \"Depart Time: \" + departTime;\n                    reasonP.innerHTML = \"Reason For Trip: \" + reason;\n\n                    // add the <p>s to the content div\n                    contentDiv.appendChild(currentLocP);\n                    contentDiv.appendChild(departTimeP);\n                    contentDiv.appendChild(reasonP);\n                }\n\n                // FINISHED\n                if (isApproved === true && isNew === false) {\n                    // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                    collButton.innerHTML = \"COMPLETE: \" + uID + \"'s Trip to \" + loc2;\n                    collButton.id = ID + \"-coll\";\n                    collButton.className = \"collapsible\";\n\n                    // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                    contentDiv.id = \"\" + ID;\n                    contentDiv.className = \"content\";\n\n                    // create the <p> for the content div\n                    var departTimeP = document.createElement(\"p\");\n                    var arrivalTimeP = document.createElement(\"p\");\n                    var reasonP = document.createElement(\"p\");\n\n                    // fill <p>s with content from json\n                    departTimeP.innerHTML = \"Depart Time: \" + departTime;\n                    arrivalTimeP.innerHTML = \"Arrival Time: \" + arrivalTime;\n                    reasonP.innerHTML = \"Reason For Trip: \" + reason;\n\n                    // add the <p>s to the content div\n                    contentDiv.appendChild(departTimeP);\n                    contentDiv.appendChild(arrivalTimeP);\n                    contentDiv.appendChild(reasonP);\n                }\n\n                // DENIED\n                if (isApproved === false && isNew === false) {\n                    // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                    collButton.innerHTML = \"DENIED: \" + uID + \"'s Trip to \" + loc2;\n                    collButton.id = ID + \"-coll\";\n                    collButton.className = \"collapsible\";\n\n                    // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                    contentDiv.id = \"\" + ID;\n                    contentDiv.className = \"content\";\n\n                    // create the <p> for the content div\n                    var reasonDenP = document.createElement(\"p\");\n\n                    // fill <p>s with content from json\n                    reasonDenP.innerHTML = \"Reason For Denial: \" + reasonDen;\n\n                    // add the <p>s to the content div\n                    contentDiv.appendChild(reasonDenP);\n                }\n\n                // add collButton and contentDiv to TripList\n                document.getElementById(\"AllTripList\").appendChild(collButton);\n                document.getElementById(\"AllTripList\").appendChild(contentDiv);\n\n                // add event listener\n                collButton.addEventListener(\"click\", function () {\n                    this.classList.toggle(\"active\");\n                    var content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    }\n                    else {\n                        content.style.maxHeight = content.scrollHeight + \"px\";\n                    }\n                })\n            }\n        }\n    }\n\n\n    return (\n        <div id=\"AllPanel\">\n            <br />\n            <div id=\"searchPanelAll\" >\n\n                <input type=\"text\" id=\"searchAllText\" placeholder=\"Search\" ref={(c) => search = c} />\n                <button type=\"button\" id=\"searchAllButton\" class=\"buttons\" onClick={searchAll}> Search </button>\n            </div>\n\n            <div id=\"AllTripListDiv\">\n                <span id=\"allTripSearchResult\"></span>\n                <div id=\"AllTripList\">\n\n                </div>\n            </div>\n\n            <br /><br />\n\n        </div>\n    );\n};\n\n\nexport default AllPanel;"]},"metadata":{},"sourceType":"module"}