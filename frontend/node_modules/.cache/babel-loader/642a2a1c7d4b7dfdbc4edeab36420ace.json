{"ast":null,"code":"var _jsxFileName = \"/home/reia/cards/frontend/src/components/PendingPanel.js\";\nimport React, { useState } from 'react';\nimport useEffectAsync from '../components/useEffectAsync'; // admin is generally referred to as user (ex: user_data) and I'll be calling the users the admin oversees clients\n\nfunction PendingPanel() {\n  var search = '';\n  var res;\n  var res2;\n  const [message, setMessage] = useState('');\n  const [searchResults, setResults] = useState('');\n  const [tripList, setTripList] = useState('');\n\n  var _ud = localStorage.getItem('user_data');\n\n  var ud = JSON.parse(_ud); // TODO - depends on vars we have stored for admin, assuming we'll have some way to get the adminUser's clients\n\n  var userId = ud.id;\n  var firstName = ud.firstName;\n  var lastName = ud.lastName;\n  var userName = ud.userName; // search for trips on page load\n\n  useEffectAsync(async () => {\n    // Remove the old contact elements before the new ones are added\n    while (document.getElementById(\"PenTripList\").hasChildNodes()) {\n      document.getElementById(\"PenTripList\").removeChild(document.getElementById(\"PenTripList\").lastChild);\n    }\n\n    var js = '{\"userName\":\"' + userName + '\"}';\n\n    try {\n      // build and send JSON\n      let response = await fetch('http://localhost:5000/api/listTripsByAdmin', {\n        method: 'POST',\n        body: js,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      var txt = await response.text();\n      res = JSON.parse(txt);\n      res = res.Results;\n    } catch (e) {\n      alert(e.toString());\n    } // check for null results\n\n\n    if (typeof res !== 'undefined') {\n      // after recieving results, select the ones we need and build their dropdowns\n      for (var i = 0; i < res.length; i++) {\n        // check that the trip status is pending\n        var isApproved = res[i].isApproved;\n        var isNew = res[i].isNew;\n\n        if (!(isApproved === false && isNew === true)) {\n          continue;\n        } // get user name of user who requested trip\n\n\n        js = '{\"Id\":\"' + res[i].userId + '\"}';\n\n        try {\n          // build and send JSON\n          let response = await fetch('http://localhost:5000/api/getById', {\n            method: 'POST',\n            body: js,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          var txt = await response.text();\n          res2 = JSON.parse(txt);\n        } catch (e) {\n          alert(e.toString());\n        } // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n\n\n        var ID = res[i]._id;\n        var uID = res2.userName;\n        var loc1 = res[i].startLocation;\n        var loc2 = res[i].destination;\n        var departTime = res[i].startTime;\n        var reason = res[i].purpose;\n        var weather = res[i].weather;\n        var userIDNUM = res[i].userId; // TODO - SHOULD BE TEMP\n\n        var adminIDNUM = res[i].adminId; // TODO - SHOULD BE TEMP\n        // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n\n        var collButton = document.createElement(\"button\");\n        collButton.innerHTML = \"TRIP REQUEST: From: \" + loc1 + \" - To: \" + loc2;\n        collButton.id = ID + \"-coll\";\n        collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n        var contentDiv = document.createElement(\"div\");\n        contentDiv.id = ID + \"-cont\";\n        contentDiv.className = \"content\"; // create the <p> for the content div\n\n        var clientP = document.createElement(\"p\");\n        var weatherP = document.createElement(\"p\");\n        var departTimeP = document.createElement(\"p\");\n        var reasonP = document.createElement(\"p\"); // fill <p>s with content from json\n\n        clientP.innerHTML = \"Request From: \" + uID;\n        weatherP.innerHTML = \"Weather Conditions: \" + weather;\n        departTimeP.innerHTML = \"Depart Time: \" + departTime;\n        reasonP.innerHTML = \"Reason For Trip: \" + reason; // add the <p>s to the content div\n\n        contentDiv.appendChild(clientP);\n        contentDiv.appendChild(weatherP);\n        contentDiv.appendChild(departTimeP);\n        contentDiv.appendChild(reasonP); // add respond button to get to deny / accept panel                \n\n        var resButton = document.createElement(\"button\");\n        resButton.type = \"button\";\n        resButton.id = ID;\n        resButton.className = \"buttons\";\n        resButton.innerHTML = \"Respond to request\";\n        resButton.addEventListener(\"click\", function (e) {\n          // save id of trip to edit\n          var idInfo = {\n            idToEdit: e.currentTarget.id,\n            uID: userIDNUM,\n            aID: adminIDNUM\n          }; // TODO - SHOULD BE TEMP (uID and aID)\n          // alert(JSON.stringify(idInfo));\n\n          localStorage.setItem('trip_edit_data', JSON.stringify(idInfo)); // swap view to respond panel\n\n          document.getElementById(\"RespondPanel\").style.display = \"block\";\n          document.getElementById(\"PendingPanel\").style.display = \"none\";\n        }); // add respond button to content div\n\n        contentDiv.appendChild(document.createElement(\"br\"));\n        contentDiv.appendChild(resButton); // add collButton and contentDiv to TripList\n\n        document.getElementById(\"PenTripList\").appendChild(collButton);\n        document.getElementById(\"PenTripList\").appendChild(contentDiv); // add event listener\n\n        collButton.addEventListener(\"click\", function () {\n          this.classList.toggle(\"active\");\n          var content = this.nextElementSibling;\n\n          if (content.style.maxHeight) {\n            content.style.maxHeight = null;\n          } else {\n            content.style.maxHeight = content.scrollHeight + \"px\";\n          }\n        });\n      }\n    }\n  }, []); // only re-run when the search term changes\n  // search pending trips\n\n  const searchPen = async event => {\n    event.preventDefault(); // Remove the old contact elements before the new ones are added\n\n    while (document.getElementById(\"PenTripList\").hasChildNodes()) {\n      document.getElementById(\"PenTripList\").removeChild(document.getElementById(\"PenTripList\").lastChild);\n    }\n\n    var js = '{\"userName\":\"' + userName + '\"}';\n\n    try {\n      // build and send JSON\n      let response = await fetch('http://localhost:5000/api/listTripsByAdmin', {\n        method: 'POST',\n        body: js,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      var txt = await response.text();\n      res = JSON.parse(txt);\n      res = res.Results;\n    } catch (e) {\n      alert(e.toString());\n    } // check for null results\n\n\n    if (typeof res !== 'undefined') {\n      // after recieving results, select the ones we need and build their dropdowns\n      for (var i = 0; i < res.length; i++) {\n        // check that the trip status is pending\n        var isApproved = res[i].isApproved;\n        var isNew = res[i].isNew;\n\n        if (!(isApproved === false && isNew === true)) {\n          continue;\n        } // get user name of user who requested trip\n\n\n        js = '{\"Id\":\"' + res[i].userId + '\"}';\n\n        try {\n          // build and send JSON\n          let response = await fetch('http://localhost:5000/api/getById', {\n            method: 'POST',\n            body: js,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          var txt = await response.text();\n          res2 = JSON.parse(txt);\n        } catch (e) {\n          alert(e.toString());\n        } // TODO - currently searching by username, possibly add multiple types of searches~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n        if (search !== \"\" && res2.userName.indexOf(search.value) === -1) {\n          continue;\n        } // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n\n\n        var ID = res[i]._id;\n        var uID = res2.userName;\n        var loc1 = res[i].startLocation;\n        var loc2 = res[i].destination;\n        var departTime = res[i].startTime;\n        var reason = res[i].purpose;\n        var weather = res[i].weather;\n        var userIDNUM = res[i].userId; // TODO - SHOULD BE TEMP\n\n        var adminIDNUM = res[i].adminId; // TODO - SHOULD BE TEMP\n        // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n\n        var collButton = document.createElement(\"button\");\n        collButton.innerHTML = \"TRIP REQUEST: From: \" + loc1 + \" - To: \" + loc2;\n        collButton.id = ID + \"-coll\";\n        collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n        var contentDiv = document.createElement(\"div\");\n        contentDiv.id = \"\" + ID;\n        contentDiv.className = \"content\"; // create the <p> for the content div\n\n        var clientP = document.createElement(\"p\");\n        var weatherP = document.createElement(\"p\");\n        var departTimeP = document.createElement(\"p\");\n        var reasonP = document.createElement(\"p\"); // fill <p>s with content from json\n\n        clientP.innerHTML = \"Request From: \" + uID;\n        weatherP.innerHTML = \"Weather Conditions: \" + weather;\n        departTimeP.innerHTML = \"Depart Time: \" + departTime;\n        reasonP.innerHTML = \"Reason For Trip: \" + reason; // add the <p>s to the content div\n\n        contentDiv.appendChild(clientP);\n        contentDiv.appendChild(weatherP);\n        contentDiv.appendChild(departTimeP);\n        contentDiv.appendChild(reasonP); // add respond button to get to deny / accept panel                \n\n        var resButton = document.createElement(\"button\");\n        resButton.type = \"button\";\n        resButton.id = ID;\n        resButton.className = \"buttons\";\n        resButton.innerHTML = \"Respond to request\";\n        resButton.addEventListener(\"click\", function (e) {\n          // save id of trip to edit\n          var idInfo = {\n            idToEdit: e.currentTarget.id,\n            uID: userIDNUM,\n            aID: adminIDNUM\n          }; // TODO - SHOULD BE TEMP (uId and aID)\n          // alert(JSON.stringify(idInfo));\n\n          localStorage.setItem('trip_edit_data', JSON.stringify(idInfo)); // swap view to respond panel\n\n          document.getElementById(\"RespondPanel\").style.display = \"block\";\n          document.getElementById(\"PendingPanel\").style.display = \"none\";\n        }); // add respond button to content div\n\n        contentDiv.appendChild(document.createElement(\"br\"));\n        contentDiv.appendChild(resButton); // add collButton and contentDiv to TripList\n\n        document.getElementById(\"PenTripList\").appendChild(collButton);\n        document.getElementById(\"PenTripList\").appendChild(contentDiv); // add event listener\n\n        collButton.addEventListener(\"click\", function () {\n          this.classList.toggle(\"active\");\n          var content = this.nextElementSibling;\n\n          if (content.style.maxHeight) {\n            content.style.maxHeight = null;\n          } else {\n            content.style.maxHeight = content.scrollHeight + \"px\";\n          }\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"PendingPanel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"searchPanelPen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"searchPenText\",\n    placeholder: \"Search\",\n    ref: c => search = c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    id: \"searchPenButton\",\n    class: \"buttons\",\n    onClick: searchPen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 17\n    }\n  }, \" Search \")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"PenTripListDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"penTripSearchResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"PenTripList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 19\n    }\n  }));\n}\n\n;\nexport default PendingPanel;","map":{"version":3,"sources":["/home/reia/cards/frontend/src/components/PendingPanel.js"],"names":["React","useState","useEffectAsync","PendingPanel","search","res","res2","message","setMessage","searchResults","setResults","tripList","setTripList","_ud","localStorage","getItem","ud","JSON","parse","userId","id","firstName","lastName","userName","document","getElementById","hasChildNodes","removeChild","lastChild","js","response","fetch","method","body","headers","txt","text","Results","e","alert","toString","i","length","isApproved","isNew","ID","_id","uID","loc1","startLocation","loc2","destination","departTime","startTime","reason","purpose","weather","userIDNUM","adminIDNUM","adminId","collButton","createElement","innerHTML","className","contentDiv","clientP","weatherP","departTimeP","reasonP","appendChild","resButton","type","addEventListener","idInfo","idToEdit","currentTarget","aID","setItem","stringify","style","display","classList","toggle","content","nextElementSibling","maxHeight","scrollHeight","searchPen","event","preventDefault","indexOf","value","c"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport useEffectAsync from '../components/useEffectAsync';\n\n// admin is generally referred to as user (ex: user_data) and I'll be calling the users the admin oversees clients\n\nfunction PendingPanel() {\n    var search = '';\n    var res;\n    var res2;\n\n    const [message, setMessage] = useState('');\n    const [searchResults, setResults] = useState('');\n    const [tripList, setTripList] = useState('');\n\n    var _ud = localStorage.getItem('user_data');\n    var ud = JSON.parse(_ud);\n\n    // TODO - depends on vars we have stored for admin, assuming we'll have some way to get the adminUser's clients\n    var userId = ud.id;\n    var firstName = ud.firstName;\n    var lastName = ud.lastName;\n    var userName = ud.userName;\n\n\n    // search for trips on page load\n    useEffectAsync(async () => {\n\n        // Remove the old contact elements before the new ones are added\n        while (document.getElementById(\"PenTripList\").hasChildNodes()) {\n            document.getElementById(\"PenTripList\").removeChild(document.getElementById(\"PenTripList\").lastChild);\n        }\n\n        var js = '{\"userName\":\"' + userName + '\"}';\n\n        try {\n            // build and send JSON\n            let response = await fetch('http://localhost:5000/api/listTripsByAdmin',\n                { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n            var txt = await response.text();\n            res = JSON.parse(txt);\n            res = res.Results;\n        }\n\n        catch (e) {\n            alert(e.toString());\n        }\n\n        // check for null results\n        if (typeof res !== 'undefined') {\n\n            // after recieving results, select the ones we need and build their dropdowns\n            for (var i = 0; i < res.length; i++) {\n                // check that the trip status is pending\n                var isApproved = res[i].isApproved;\n                var isNew = res[i].isNew;\n\n                if (!(isApproved === false && isNew === true)) {\n                    continue;\n                }\n\n                // get user name of user who requested trip\n                js = '{\"Id\":\"' + res[i].userId + '\"}';\n                try {\n                    // build and send JSON\n                    let response = await fetch('http://localhost:5000/api/getById',\n                        { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n                    var txt = await response.text();\n                    res2 = JSON.parse(txt);\n                }\n                catch (e) {\n                    alert(e.toString());\n                }\n\n                // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n                var ID = res[i]._id;\n                var uID = res2.userName;\n                var loc1 = res[i].startLocation;\n                var loc2 = res[i].destination;\n                var departTime = res[i].startTime;\n                var reason = res[i].purpose;\n                var weather = res[i].weather;\n\n                var userIDNUM = res[i].userId;  // TODO - SHOULD BE TEMP\n                var adminIDNUM = res[i].adminId;  // TODO - SHOULD BE TEMP\n\n\n                // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                var collButton = document.createElement(\"button\");\n                collButton.innerHTML = \"TRIP REQUEST: From: \" + loc1 + \" - To: \" + loc2;\n                collButton.id = ID + \"-coll\";\n                collButton.className = \"collapsible\";\n\n                // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                var contentDiv = document.createElement(\"div\");\n                contentDiv.id = ID + \"-cont\";\n                contentDiv.className = \"content\";\n\n                // create the <p> for the content div\n                var clientP = document.createElement(\"p\");\n                var weatherP = document.createElement(\"p\");\n                var departTimeP = document.createElement(\"p\");\n                var reasonP = document.createElement(\"p\");\n\n                // fill <p>s with content from json\n                clientP.innerHTML = \"Request From: \" + uID;\n                weatherP.innerHTML = \"Weather Conditions: \" + weather;\n                departTimeP.innerHTML = \"Depart Time: \" + departTime;\n                reasonP.innerHTML = \"Reason For Trip: \" + reason;\n\n                // add the <p>s to the content div\n                contentDiv.appendChild(clientP);\n                contentDiv.appendChild(weatherP);\n                contentDiv.appendChild(departTimeP);\n                contentDiv.appendChild(reasonP);\n\n                // add respond button to get to deny / accept panel                \n                var resButton = document.createElement(\"button\");\n                resButton.type = \"button\";\n                resButton.id = ID;\n                resButton.className = \"buttons\";\n                resButton.innerHTML = \"Respond to request\";\n                resButton.addEventListener(\"click\", function (e) {\n                    // save id of trip to edit\n                    var idInfo = { idToEdit: e.currentTarget.id, uID: userIDNUM, aID: adminIDNUM }  // TODO - SHOULD BE TEMP (uID and aID)\n                    // alert(JSON.stringify(idInfo));\n                    localStorage.setItem('trip_edit_data', JSON.stringify(idInfo));\n\n                    // swap view to respond panel\n                    document.getElementById(\"RespondPanel\").style.display = \"block\";\n                    document.getElementById(\"PendingPanel\").style.display = \"none\";\n                });\n\n                // add respond button to content div\n                contentDiv.appendChild(document.createElement(\"br\"));\n                contentDiv.appendChild(resButton);\n\n                // add collButton and contentDiv to TripList\n                document.getElementById(\"PenTripList\").appendChild(collButton);\n                document.getElementById(\"PenTripList\").appendChild(contentDiv);\n\n                // add event listener\n                collButton.addEventListener(\"click\", function () {\n                    this.classList.toggle(\"active\");\n                    var content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    }\n                    else {\n                        content.style.maxHeight = content.scrollHeight + \"px\";\n                    }\n                })\n            }\n        }\n    }, []); // only re-run when the search term changes\n\n    // search pending trips\n    const searchPen = async event => {\n        event.preventDefault();\n\n        // Remove the old contact elements before the new ones are added\n        while (document.getElementById(\"PenTripList\").hasChildNodes()) {\n            document.getElementById(\"PenTripList\").removeChild(document.getElementById(\"PenTripList\").lastChild);\n        }\n\n        var js = '{\"userName\":\"' + userName + '\"}';\n\n        try {\n            // build and send JSON\n            let response = await fetch('http://localhost:5000/api/listTripsByAdmin',\n                { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n            var txt = await response.text();\n            res = JSON.parse(txt);\n            res = res.Results;\n        }\n\n        catch (e) {\n            alert(e.toString());\n        }\n\n        // check for null results\n        if (typeof res !== 'undefined') {\n\n            // after recieving results, select the ones we need and build their dropdowns\n            for (var i = 0; i < res.length; i++) {\n                // check that the trip status is pending\n                var isApproved = res[i].isApproved;\n                var isNew = res[i].isNew;\n\n                if (!(isApproved === false && isNew === true)) {\n                    continue;\n                }\n\n                // get user name of user who requested trip\n                js = '{\"Id\":\"' + res[i].userId + '\"}';\n                try {\n                    // build and send JSON\n                    let response = await fetch('http://localhost:5000/api/getById',\n                        { method: 'POST', body: js, headers: { 'Content-Type': 'application/json' } });\n\n                    var txt = await response.text();\n                    res2 = JSON.parse(txt);\n                }\n                catch (e) {\n                    alert(e.toString());\n                }\n\n                // TODO - currently searching by username, possibly add multiple types of searches~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                if (search !== \"\" && res2.userName.indexOf(search.value) === -1) {\n                    continue;\n                }\n\n                // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n                var ID = res[i]._id;\n                var uID = res2.userName;\n                var loc1 = res[i].startLocation;\n                var loc2 = res[i].destination;\n                var departTime = res[i].startTime;\n                var reason = res[i].purpose;\n                var weather = res[i].weather;\n\n                var userIDNUM = res[i].userId; // TODO - SHOULD BE TEMP\n                var adminIDNUM = res[i].adminId;  // TODO - SHOULD BE TEMP\n\n                // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                var collButton = document.createElement(\"button\");\n                collButton.innerHTML = \"TRIP REQUEST: From: \" + loc1 + \" - To: \" + loc2;\n                collButton.id = ID + \"-coll\";\n                collButton.className = \"collapsible\";\n\n                // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                var contentDiv = document.createElement(\"div\");\n                contentDiv.id = \"\" + ID;\n                contentDiv.className = \"content\";\n\n                // create the <p> for the content div\n                var clientP = document.createElement(\"p\");\n                var weatherP = document.createElement(\"p\");\n                var departTimeP = document.createElement(\"p\");\n                var reasonP = document.createElement(\"p\");\n\n                // fill <p>s with content from json\n                clientP.innerHTML = \"Request From: \" + uID;\n                weatherP.innerHTML = \"Weather Conditions: \" + weather;\n                departTimeP.innerHTML = \"Depart Time: \" + departTime;\n                reasonP.innerHTML = \"Reason For Trip: \" + reason;\n\n                // add the <p>s to the content div\n                contentDiv.appendChild(clientP);\n                contentDiv.appendChild(weatherP);\n                contentDiv.appendChild(departTimeP);\n                contentDiv.appendChild(reasonP);\n\n                // add respond button to get to deny / accept panel                \n                var resButton = document.createElement(\"button\");\n                resButton.type = \"button\";\n                resButton.id = ID;\n                resButton.className = \"buttons\";\n                resButton.innerHTML = \"Respond to request\";\n                resButton.addEventListener(\"click\", function (e) {\n                    // save id of trip to edit\n                    var idInfo = { idToEdit: e.currentTarget.id, uID: userIDNUM, aID: adminIDNUM } // TODO - SHOULD BE TEMP (uId and aID)\n                    // alert(JSON.stringify(idInfo));\n                    localStorage.setItem('trip_edit_data', JSON.stringify(idInfo));\n\n                    // swap view to respond panel\n                    document.getElementById(\"RespondPanel\").style.display = \"block\";\n                    document.getElementById(\"PendingPanel\").style.display = \"none\";\n                });\n\n                // add respond button to content div\n                contentDiv.appendChild(document.createElement(\"br\"));\n                contentDiv.appendChild(resButton);\n\n                // add collButton and contentDiv to TripList\n                document.getElementById(\"PenTripList\").appendChild(collButton);\n                document.getElementById(\"PenTripList\").appendChild(contentDiv);\n\n                // add event listener\n                collButton.addEventListener(\"click\", function () {\n                    this.classList.toggle(\"active\");\n                    var content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    }\n                    else {\n                        content.style.maxHeight = content.scrollHeight + \"px\";\n                    }\n                })\n            }\n        }\n    }\n\n\n    return (\n        <div id=\"PendingPanel\">\n            <br />\n            <div id=\"searchPanelPen\" >\n\n                <input type=\"text\" id=\"searchPenText\" placeholder=\"Search\" ref={(c) => search = c} />\n                <button type=\"button\" id=\"searchPenButton\" class=\"buttons\" onClick={searchPen}> Search </button>\n            </div>\n\n            <div id=\"PenTripListDiv\">\n                <span id=\"penTripSearchResult\"></span>\n                <div id=\"PenTripList\">\n\n                </div>\n            </div>\n\n            <br /><br />\n\n        </div>\n    );\n};\n\n\nexport default PendingPanel;"]},"metadata":{},"sourceType":"module"}